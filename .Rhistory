# GET WORKING DIRECTORY
getwd()
#setwd("~/Downloads/All the Required Datasets")
setwd("C:/Users/b1081572/OneDrive - Teesside University/DS-Foundation/ICA")
install.packages("caret")
install.packages("corrplot")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("corrgram")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("cluster")
library(caret)
library(corrplot)
library(dplyr)
library(tidyr)
library(corrgram)
library(ggplot2)
library(ggthemes)
library(cluster)
library(pROC)
`cmc` <- read.csv("crop_recommendation.csv", header=FALSE)
setwd("C:/Users/b1081572/OneDrive - Teesside University/AI-Ethics")
#setwd("~/Downloads/All the Required Datasets")
setwd("C:/Users/b1081572/OneDrive - Teesside University/AI-Ethics")
#setwd("~/Downloads/All the Required Datasets")
setwd("C:/Users/b1081572/OneDrive - Teesside University/AI-Ethics")
# GET WORKING DIRECTORY
getwd()
`cmc` <- read.csv("crop_recommendation.csv", header=FALSE)
`Crop_recommendation.(1)` <- read.csv("C:/Users/b1081572/OneDrive - Teesside University/AI-Ethics/Crop_recommendation (1).csv")
View(`Crop_recommendation.(1)`)
str(cmc)
`Crop_recommendation.(1)` <- read.csv("C:/Users/b1081572/OneDrive - Teesside University/AI-Ethics/Crop_recommendation (1).csv")
crop <- `Crop_recommendation.(1)`
str(crop)
is.na(crop)
crop$label <- as.factor(crop$label)
str(crop)
rows <- sample(nrow(crop))
crop <- crop[rows, ]
crop
dim(crop)
dim(crop)
sapply(crop, class)
head(crop, n=20)
summary(crop)
levels(crop$label)
percentage <- prop.table(table(crop$label))*100
cbind(freq=table(crop$label), percentage=percentage)
cbind(freq=table(crop$label), percentage=percentage)
barplot(prop.table(table(ccrop$label)),
col = rainbow(2),
ylim = c(0, 0.8),
main = "Class Distribution")
barplot(prop.table(table(crop$label)),
col = rainbow(2),
ylim = c(0, 0.8),
main = "Class Distribution")
levels(crop$label)
percentage <- prop.table(table(crop$label))*100
cbind(freq=table(crop$label), percentage=percentage)
barplot(prop.table(table(crop$label)),
col = rainbow(2),
ylim = c(0, 0.8),
main = "Class Distribution")
# Splitting the dataset into training and Testing set
set.seed(7)
inTrain <- createDataPartition(cmc$cm_Used, p = 0.8, list = FALSE)
# Splitting the dataset into training and Testing set
set.seed(7)
inTrain <- createDataPartition(crop$label, p = 0.8, list = FALSE)
training <- crop[inTrain,]
testing <- crop[-inTrain,]
dim(training)
sapply(training, class)
head(training, n=20)
par("mar")
par(mfrow=c(1, 9))
#par(mar(c(1,1,1,1)))
for(i in 1:9){
boxplot(training[, i], main=names(training)[i])
}
par(mfrow=c(1, 9))
par(mar=c(1,1,1,1))
for (i in 1:9) {
hist(training[, i], main=names(training)[i])
}
hist(crop$P, freq = F, prob=T, breaks = 7)
hist(crop$ph, freq = F, prob=T, breaks = 7)
hist(crop$label, prob=T, breaks=7)
hist(crop$label, prob=T, breaks=7)
hist(crop$ph, freq = F, prob=T, breaks = 7)
hist(crop$temperature, prob=T, breaks=7)
# Density
par(mfrow=c(2, 7))
for (i in 1:9){
plot(density(training[, i]), main=names(training)[i])
}
pairs(training[,1:9])
pairs(training[,1:7])
# Correlation
correlations <- cor(training[, 1:7])
corrplot(correlations, method = "circle")
pairs(training[,1:7])
# Correlation
correlations <- cor(training[, 1:7])
corrplot(correlations, method = "circle")
fit.knn <- train(label~., data=training, method="knn",metric = metric,
preProc=c("center", "scale"), trControl=trainCont)
trainCont <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
metric <- "Accuracy"
set.seed(7)
fit.knn <- train(label~., data=training, method="knn",metric = metric,
preProc=c("center", "scale"), trControl=trainCont)
set.seed(7)
fit.svm <- train(label~., data=training, method="svmRadial",metric = metric,
preProc=c("center", "scale"), trControl=trainCont)
# Summarize model accuracies
results <- resamples(list(KNN=knn.fit, SVM=fit.svm))
# Summarize model accuracies
results <- resamples(list(KNN=fit.knn, SVM=fit.svm))
summary(results)
dotplot(results)
print(fit.knn)
print(fit.svm)
